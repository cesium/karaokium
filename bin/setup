#!/usr/bin/env bash

set -Eeuo pipefail

BASE_DIR=$(dirname "${BASH_SOURCE[0]:-$0}")
cd "${BASE_DIR}/.." || exit 127

# shellcheck source=../scripts/helpers.sh
. scripts/helpers.sh
# shellcheck source=../scripts/logging.sh
. scripts/logging.sh
# shellcheck source=../scripts/utils.sh
. scripts/utils.sh

PROGRAM=$(basename "${BASH_SOURCE[0]:-$0}")
VERSION=0.10.0

function display_help() {
  cat <<EOF
  $(help_title_section Usage)
    ${PROGRAM} [options] <environment>

  $(help_title_section Environments)
    dev               Development environment [default environment].
    prod              Production environment.

  $(help_title_section Options)
    -h --help         Show this screen.
    -v --version      Show version.
EOF
}

case ${1:-skip} in
  -h | --help)
    display_help

    exit 0
    ;;
  -v | --version)
    display_version "${VERSION}" "${PROGRAM}"

    exit 0
    ;;
esac

case ${1:-dev} in
  dev | prod)
    env=${1:-dev}

    log_info "setup" "Setting up the .env.${env}..."
    if [ ! -f ".env.${env}" ]; then
      cp ".env.${env}.sample" ".env.${env}"
      log_success ".env.${env} file created, you might want to open .env.${env} and
    set the correct values. Make sure you export them into your environment
    before runing this script again."
      exit
    else
      log_warn ".env.${env} file already exists, skipping..."
    fi

    log_info "setup" "Installing required languages..."
    if not_installed "asdf"; then
      log_error "
    We are using asdf (https://github.com/asdf-vm/asdf) to manage tool
    dependencies, since it was not found on your system we cannot ensure that you
    are using the correct versions of all the tools. Please install it and run
    this script again, or proceed at your own peril.
  "

      ensure_confirmation
    else
      set +e
      asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git 2>/dev/null
      asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git 2>/dev/null
      set -e

      asdf install
    fi

    log_info "setup" "Installing dependencies..."
    MIX_ENV=$env mix local.hex --force
    MIX_ENV=$env mix local.rebar --force
    MIX_ENV=$env mix archive.install hex phx_new --force
    MIX_ENV=$env mix escript.install hex livebook --force
    MIX_ENV=$env mix deps.get

    log_info "setup" "Creating, running migrations and populating database..."
    MIX_ENV=$env mix ecto.setup

    log_info "setup" "You're good to go! Run mix phx.server to get the development server running."
    ;;
  *)
    display_help >&2
    exit 1
    ;;
esac
